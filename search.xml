<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Socket.IO中文文档</title>
      <link href="/2018/10/16/socket-io-doc-cn/"/>
      <url>/2018/10/16/socket-io-doc-cn/</url>
      <content type="html"><![CDATA[<p>尝试翻译socket.io官方文档, 没有时间线, 不知道何时完成…<br>水平有限, 如果有人看到, 并且发现其中错误, 欢饮您给我指出, 谢谢!<br>以下正文</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#目录">目录</a></li><li><a href="#概述">概述</a><ul><li><a href="#socketio是什么">Socket.IO是什么</a><ul><li><a href="#可靠性">可靠性</a></li><li><a href="#支持自动重连">支持自动重连</a></li><li><a href="#断线检测">断线检测</a></li><li><a href="#支持二进制">支持二进制</a></li><li><a href="#支持多路技术待翻译">支持多路技术(待翻译)</a></li><li><a href="#支持房间模式">支持房间模式</a></li></ul></li><li><a href="#socketio不是什么">Socket.IO不是什么</a></li><li><a href="#socketio的安装">Socket.IO的安装</a><ul><li><a href="#服务器">服务器</a></li><li><a href="#javascript客户端">JavaScript客户端</a></li><li><a href="#其他的客户端实现">其他的客户端实现</a></li></ul></li><li><a href="#与http模块搭配使用">与http模块搭配使用</a><ul><li><a href="#服务器appjs">服务器(app.js)</a></li><li><a href="#客户端indexhtml">客户端(index.html)</a></li></ul></li><li><a href="#与express模块搭配使用">与express模块搭配使用</a><ul><li><a href="#服务器appjs">服务器(app.js)</a></li><li><a href="#客户端indexhtml">客户端(index.html)</a></li></ul></li><li><a href="#发送和接收事件">发送和接收事件</a><ul><li><a href="#服务器">服务器</a></li></ul></li><li><a href="#restricting-yourself-to-a-namespace待翻译">Restricting yourself to a namespace(待翻译)</a></li><li><a href="#sending-volatile-messages待翻译">Sending volatile messages(待翻译)</a></li><li><a href="#发送和获取数据acknowledgements待翻译">发送和获取数据(acknowledgements)(待翻译)</a></li><li><a href="#广播消息待翻译">广播消息(待翻译)</a></li><li><a href="#作为跨浏览器的websocket使用它待翻译">作为跨浏览器的WebSocket使用它(待翻译)</a></li></ul></li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Socket-IO是什么"><a href="#Socket-IO是什么" class="headerlink" title="Socket.IO是什么"></a>Socket.IO是什么</h2><p>Socket.IO是浏览器与服务器之间的实时的、双向性的、基于事件的通讯库，它由两部分组成：</p><ul><li>Node.js服务器：<a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">源码</a> | <a href="https://socket.io/docs/server-api/" target="_blank" rel="noopener">API</a></li><li>供浏览器使用的Javascript库(也可以在Node.js中运行)：<a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noopener">源码</a> | <a href="https://socket.io/docs/client-api/" target="_blank" rel="noopener">API</a></li></ul><p>它的主要特点是：</p><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>即使在以下情况下依然可以建立链接：</p><ul><li>有代理和负载均衡。</li><li>个人防火墙和杀毒软件。</li></ul><p>为了达到这个目的， Socket.IO依赖于 <a href="https://github.com/socketio/engine.io" target="_blank" rel="noopener">Engine.IO</a>，先建立一个长轮询连接，然后尝试将其升级为经测试过更可靠的传输方式， 比如WebSocket。更多信息请访问 <a href="https://github.com/socketio/engine.io#goals" target="_blank" rel="noopener">Goals</a> 板块.</p><h3 id="支持自动重连"><a href="#支持自动重连" class="headerlink" title="支持自动重连"></a>支持自动重连</h3><p>除非被通知，否则一个断开连接的客户端会一直尝试重新连接服务器， 知道服务器再次可用。请在 <a href="https://socket.io/docs/client-api/#new-Manager-url-options" target="_blank" rel="noopener">这里</a> 查看可用的重连选项。</p><h3 id="断线检测"><a href="#断线检测" class="headerlink" title="断线检测"></a>断线检测</h3><p>在Engine.IO层面实现了心跳机制，允许客户端和服务器双方都能知道另一方是否不再响应。</p><p>这个功能是通过在服务端和客户端设置的计时器实现的，在连接建立是的握手阶段通过超时值共享（参数pingInterval和pingTimeout）。Those timers require any subsequent client calls to be directed to the same server, hence the sticky-session requirement when using multiples nodes.</p><h3 id="支持二进制"><a href="#支持二进制" class="headerlink" title="支持二进制"></a>支持二进制</h3><p>所有可以序列化的数据结构都可以发送，包括：</p><ul><li>浏览器中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a></li><li>Node.js中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer</a> 和 <a href="https://nodejs.org/api/buffer.html" target="_blank" rel="noopener">Buffer</a><h3 id="支持多路技术-待翻译"><a href="#支持多路技术-待翻译" class="headerlink" title="支持多路技术(待翻译)"></a>支持多路技术(待翻译)</h3>In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several Namespaces, which will act as separate communication channels but will share the same underlying connection.<h3 id="支持房间模式"><a href="#支持房间模式" class="headerlink" title="支持房间模式"></a>支持房间模式</h3>在任一命名空间内，你可以定义任意的频道， 我们称之为房间（Rooms），socket连接可以加入或离开放假。你可以向一个指定的房间广播消息，所有加入该房间的客户端都会受到广播消息。</li></ul><p>这是一个很有用的功能， 可以向一个群组的用户或者连接到多个设备的指定用户发送通知。</p><p>这些功能都有一个简单方便的API，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    socket.emit(<span class="string">'request'</span>, <span class="comment">/* */</span>); <span class="comment">//向socket连接发送事件</span></span><br><span class="line">    io.emit(<span class="string">'broadcast'</span>, <span class="comment">/* */</span>); <span class="comment">//向所有连接发送事件</span></span><br><span class="line">    socket.on(<span class="string">'reply'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* */</span> &#125;;); <span class="comment">//监听reply事件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Socket-IO不是什么"><a href="#Socket-IO不是什么" class="headerlink" title="Socket.IO不是什么"></a>Socket.IO不是什么</h2><p>Socket.IO <strong>不是</strong> WebSocket的一种实现方法。虽然Socket.IO确实在WebSocket可用的时候使用其作为传输方式，它向每一个数据包添加了一些元数据：数据包类型（packet type）、命名空间（namespace）和确认id（ack id）如果需要消息确认的话。这就是为什么一个WebSocket客户端不能连接到Socket.IO服务器， 反过来一个Socket.IO客户端也不能连接到WebSocket服务器。请在<a href="https://github.com/socketio/socket.io-protocol" target="_blank" rel="noopener">这里</a>查看协议规范。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 警告：客户端不能连接！</span></span><br><span class="line"><span class="keyword">const</span> client = io(<span class="string">'ws://echo.websocket.org'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="Socket-IO的安装"><a href="#Socket-IO的安装" class="headerlink" title="Socket.IO的安装"></a>Socket.IO的安装</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save socket.io</span><br></pre></td></tr></table></figure><p><a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">查看源码</a></p><h3 id="JavaScript客户端"><a href="#JavaScript客户端" class="headerlink" title="JavaScript客户端"></a>JavaScript客户端</h3><p>默认在服务端中提供的/socket.io/socket.io.js文件。</p><p>也可以从某个CDN上获取，比如 <a href="https://cdnjs.com/libraries/socket.io" target="_blank" rel="noopener">cdnjs</a></p><p>若果要在Node.js中使用，或者搭配像 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 或者 <a href="http://browserify.org/" target="_blank" rel="noopener">browserify</a> 这样的工具包使用，可以通过npm来安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save socket.io-client</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noopener">查看源码</a></p><h3 id="其他的客户端实现"><a href="#其他的客户端实现" class="headerlink" title="其他的客户端实现"></a>其他的客户端实现</h3><p>还有一些其他语言的客户端实现，它们是由社区维护的：</p><ul><li>Java: <a href="https://github.com/socketio/socket.io-client-java" target="_blank" rel="noopener">https://github.com/socketio/socket.io-client-java</a></li><li>C++: <a href="https://github.com/socketio/socket.io-client-cpp" target="_blank" rel="noopener">https://github.com/socketio/socket.io-client-cpp</a></li><li>Swift: <a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="noopener">https://github.com/socketio/socket.io-client-swift</a></li><li>Dart: <a href="https://github.com/rikulo/socket.io-client-dart" target="_blank" rel="noopener">https://github.com/rikulo/socket.io-client-dart</a></li><li>Python: <a href="https://github.com/invisibleroads/socketIO-client" target="_blank" rel="noopener">https://github.com/invisibleroads/socketIO-client</a></li><li>.Net: <a href="https://github.com/Quobject/SocketIoClientDotNet" target="_blank" rel="noopener">https://github.com/Quobject/SocketIoClientDotNet</a><h2 id="与http模块搭配使用"><a href="#与http模块搭配使用" class="headerlink" title="与http模块搭配使用"></a>与http模块搭配使用</h2><h3 id="服务器-app-js"><a href="#服务器-app-js" class="headerlink" title="服务器(app.js)"></a>服务器(app.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(handler);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(app);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    fs.readFile(__dirname + <span class="string">'/index.html'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                res.writeHead(<span class="number">500</span>);</span><br><span class="line">                <span class="keyword">return</span> res.end(<span class="string">'Error loading index.html'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res.writeHead(<span class="number">200</span>);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">    socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="客户端-index-html"><a href="#客户端-index-html" class="headerlink" title="客户端(index.html)"></a>客户端(index.html)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io(<span class="string">'http://localhost'</span>);</span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">'my other event'</span>, &#123; <span class="attr">my</span>: <span class="string">'data'</span> &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="与express模块搭配使用"><a href="#与express模块搭配使用" class="headerlink" title="与express模块搭配使用"></a>与express模块搭配使用</h2><h3 id="服务器-app-js-1"><a href="#服务器-app-js-1" class="headerlink" title="服务器(app.js)"></a>服务器(app.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>);</span><br><span class="line"><span class="comment">//注意: app.listen(80)在这里不可用</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hellp</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">    socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="客户端-index-html-1"><a href="#客户端-index-html-1" class="headerlink" title="客户端(index.html)"></a>客户端(index.html)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost'</span>);</span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">'my other event'</span>, &#123; <span class="attr">my</span>: <span class="string">'data'</span> &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="发送和接收事件"><a href="#发送和接收事件" class="headerlink" title="发送和接收事件"></a>发送和接收事件</h2><p>Socket.IO允许你发送和接收自定义事件。除 <strong><em>connect</em></strong> 、<strong><em>message</em></strong> 、<strong><em>disconnect</em></strong>之外，你可以发送自定义事件：</p><h3 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//io(&lt;端口&gt;)会创建一个http服务器</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    io.emit(<span class="string">'this'</span>, &#123; <span class="attr">will</span>: <span class="string">'be received by everyone'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'private message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">from, msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I received a private message by '</span>, <span class="keyword">from</span>, <span class="string">' saying '</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        io.emit(<span class="string">'user disconnected'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Restricting-yourself-to-a-namespace-待翻译"><a href="#Restricting-yourself-to-a-namespace-待翻译" class="headerlink" title="Restricting yourself to a namespace(待翻译)"></a>Restricting yourself to a namespace(待翻译)</h2><h2 id="Sending-volatile-messages-待翻译"><a href="#Sending-volatile-messages-待翻译" class="headerlink" title="Sending volatile messages(待翻译)"></a>Sending volatile messages(待翻译)</h2><h2 id="发送和获取数据-acknowledgements-待翻译"><a href="#发送和获取数据-acknowledgements-待翻译" class="headerlink" title="发送和获取数据(acknowledgements)(待翻译)"></a>发送和获取数据(acknowledgements)(待翻译)</h2><h2 id="广播消息-待翻译"><a href="#广播消息-待翻译" class="headerlink" title="广播消息(待翻译)"></a>广播消息(待翻译)</h2><h2 id="作为跨浏览器的WebSocket使用它-待翻译"><a href="#作为跨浏览器的WebSocket使用它-待翻译" class="headerlink" title="作为跨浏览器的WebSocket使用它(待翻译)"></a>作为跨浏览器的WebSocket使用它(待翻译)</h2>]]></content>
      
      <categories>
          
          <category> 服务器相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> socket.io </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Typescript生成随机数</title>
      <link href="/2018/07/18/typescript-random-number/"/>
      <url>/2018/07/18/typescript-random-number/</url>
      <content type="html"><![CDATA[<p>直接上代码，注释里写的挺清楚的了。</p><p>其中Math.floar(num)方法会返回一个小于等于传入值num的整数。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个范围内的随机数</span></span><br><span class="line"><span class="comment"> * @param min 最小值(包括)</span></span><br><span class="line"><span class="comment"> * @param max 最大值(不包括)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> getRandomInteger(min: <span class="built_in">number</span>, max: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(min == max) &#123;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(min &gt; max) &#123;</span><br><span class="line">        <span class="keyword">return</span> Util.getRandomInteger(max, min);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> range = max - min;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">return</span> (min + <span class="built_in">Math</span>.floor(rand * range));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
            <tag> typescript </tag>
            
            <tag> random </tag>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++ 11中的lambda表达式解析</title>
      <link href="/2018/06/20/cpp11-lambda/"/>
      <url>/2018/06/20/cpp11-lambda/</url>
      <content type="html"><![CDATA[<p>C++11中的lambda表达式规范如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[capture](params)<span class="keyword">mutable</span> exception attribute-&gt;ret &#123;body&#125;</span><br><span class="line">[capture](params)-&gt;ret &#123;body&#125;</span><br><span class="line">[capture](params) &#123;body&#125;</span><br><span class="line">[capture] &#123;body&#125;</span><br></pre></td></tr></table></figure></p><p>其中</p><p>(1) 是完整的 lambda 表达式形式，</p><p>(2) const 类型的 lambda 表达式，该类型的表达式不能改捕获(“capture”)列表中的值。</p><p>(3)省略了返回值类型的 lambda 表达式，但是该 lambda 表达式的返回类型可以按照下列规则推演出来：如果 lambda 代码块中包含了 return 语句，则该 lambda 表达式的返回类型由 return 语句的返回类型确定。如果没有 return 语句，则类似 void f(…) 函数。</p><p>(4)省略了参数列表，类似于无参函数 f()。</p><p>mutable 修饰符说明 lambda 表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获对象的 non-const 方法。</p><p>exception 说明 lambda 表达式是否抛出异常(noexcept)，以及抛出何种异常，类似于void f() throw(X, Y)。</p><p>attribute 用来声明属性。</p><p>另外，capture 指定了在可见域范围内 lambda 表达式的代码内可见得外部变量的列表，具体解释如下：</p><p>1、[a,&amp;b] a变量以值的方式被捕获，b以引用的方式被捕获。</p><p>2、[this] 以值的方式捕获 this 指针。</p><p>3、[&amp;] 以引用的方式捕获所有的外部自动变量。</p><p>4、[=] 以值的方式捕获所有的外部自动变量。</p><p>5、[] 不捕获外部的任何变量。</p><p>此外，params 指定 lambda 表达式的参数。</p><p>一个具体的 C++11 lambda 表达式例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    c.erase(<span class="built_in">std</span>::remove_if(c.begin(), c.end(), [x](<span class="keyword">int</span> n) &#123; <span class="keyword">return</span> n &lt; x; &#125; ), c.end());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: c) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the type of a closure cannot be named, but can be inferred with auto</span></span><br><span class="line">    <span class="keyword">auto</span> func1 = [](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> i+<span class="number">4</span>; &#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"func1: "</span> &lt;&lt; func1(<span class="number">6</span>) &lt;&lt; <span class="string">'\n'</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// like all callable objects, closures can be captured in std::function</span></span><br><span class="line">    <span class="comment">// (this may incur unnecessary overhead)</span></span><br><span class="line">    <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; func2 = [](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> i+<span class="number">4</span>; &#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"func2: "</span> &lt;&lt; func2(<span class="number">6</span>) &lt;&lt; <span class="string">'\n'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> cpp </tag>
            
            <tag> c++11 </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++字符串操作</title>
      <link href="/2018/06/20/cpp-string-operation/"/>
      <url>/2018/06/20/cpp-string-operation/</url>
      <content type="html"><![CDATA[<p>C++中常见的字符串操作， 直接看代码， 注释比较详细<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化字符 </span></span><br><span class="line">    <span class="built_in">string</span> newString;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">message</span><span class="params">(<span class="string">"Aloha World!"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; message &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">st1</span><span class="params">(arr)</span></span>; <span class="comment">//用字符数组初始化字符串 </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; st1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//向字符后追加内容 </span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s1.append(<span class="string">" to C++"</span>); <span class="comment">//向s1后边追加 " to C++"  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出结果为 "Welcome to C++" </span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s2.append(<span class="string">" to C and C++"</span>, <span class="number">3</span>, <span class="number">2</span>); <span class="comment">//向s2后边追加字符串从第3个位置开始的2个字符，即" C" </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出 "Welcome C"</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s3.append(<span class="string">" to C and C++"</span>,<span class="number">5</span>); <span class="comment">//向s3后边追加从头开始的5个字符，即" to C"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出 "Welcome to C"</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s4.append(<span class="number">4</span>,<span class="string">'G'</span>); <span class="comment">//向s4后边追加4个'G'</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s4 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出 "WelcomeGGGG"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给字符赋新值 </span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s5</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s5.assign(<span class="string">"Dallas"</span>); <span class="comment">//将"Dallas"赋给s5，覆盖原值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s5 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出"Dallas"</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s6</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s6.assign(<span class="string">"Dallas,Texas"</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">//将字符串从1号位置开始的3个字符赋给s6，即 "all"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s6 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出"all"</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s7</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s7.assign(<span class="string">"Dallas,Texas"</span>,<span class="number">6</span>); <span class="comment">//将字符串从头开始的6个字符赋值给s7，即"Dallas"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s7 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出"Dallas"</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s8</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    s8.assign(<span class="number">4</span>,<span class="string">'G'</span>); <span class="comment">//将字符G复制4份赋值给s8，即"GGGG"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s8 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出 "GGGG"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空字符串</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s9</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s9.at(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印位于字符串s9的3号位置的字符 即 'c'</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s9.erase(<span class="number">2</span>,<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//擦除字符串s9从2号位置开始的3个字符 即"lco"，现在s9的值为"Weme"</span></span><br><span class="line">    s9.clear(); <span class="comment">//清空字符串s9</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s9.empty() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//判断s9是否为空，是则打印1，否则打印0.此处打印1 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//比较字符串 compare();</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s10</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s11</span><span class="params">(<span class="string">"Welcomg"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s10.compare(s11) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//用s10和s11的ASCII码相减，打印 -2 (s10 - s11) </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s11.compare(s10) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//用s11和s10的ASCII码相减，打印 2 (s11 - s10)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s10.compare(<span class="string">"Welcome"</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取子字符串</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s12</span><span class="params">(<span class="string">"Welcome"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s12.substr(<span class="number">0</span>,<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//获取s12从0号位置开始的1个字符 即 'W' </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s12.substr(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//获取s12从3号位置开始到结尾的字符串 即 "come"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s12.substr(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//获取s12从3号位置开始的3个字符 即 "com"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//搜索字符串</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s13</span><span class="params">(<span class="string">"Welcome to HTML"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s13.find(<span class="string">"co"</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//在s13中搜索 "co"，返回其第一次出现的位置 即 3</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s13.find(<span class="string">"co"</span>,<span class="number">6</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//在s13中从6号位置向后搜索"co",并返回第一次出现的位置，如果没有返回 -1  此处为 -1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s13.find(<span class="string">'o'</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//在s13中搜索字符 o 的位置，并返回第一次出现的位置 此处为 4</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s13.find(<span class="string">'o'</span>,<span class="number">6</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//在s13中从6号位置搜索字符 o 的位置，并返回第一次出现的位置，如果没有返回 -1 此处为 9 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入和替换字符串</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s14</span><span class="params">(<span class="string">"Welcome to HTML"</span>)</span></span>;</span><br><span class="line">    s14.insert(<span class="number">11</span>,<span class="string">"C++ and "</span>); <span class="comment">//从s14的11号位置插入 "C++ and ",插入后s14的值为 "Welcome to C++ and HTML"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s14 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s15</span><span class="params">(<span class="string">"AA"</span>)</span></span>;</span><br><span class="line">    s15.insert(<span class="number">1</span>,<span class="number">4</span>,<span class="string">'B'</span>); <span class="comment">//从s15的1号位置插入4个字符B，插入后s15的值为 "ABBBBA"</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s15 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s16</span><span class="params">(<span class="string">"Welcome to HTML"</span>)</span></span>;</span><br><span class="line">    s16.replace(<span class="number">11</span>,<span class="number">4</span>,<span class="string">"C++"</span>); <span class="comment">//将s16从11号位置开始的4个字符替换为 "C++",注意字符串结尾的 '\0' </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s16 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 字符串 </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用VBA输出UTF-8</title>
      <link href="/2018/06/19/vba-out-utf8/"/>
      <url>/2018/06/19/vba-out-utf8/</url>
      <content type="html"><![CDATA[<p>以前使用excel导出xml时使用的， 默认导出的xml貌似是ANSI编码， 调用这个转码可以使导出的文件为UTF-8编码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Public</span> <span class="selector-tag">Function</span> <span class="selector-tag">writeOut</span>(<span class="selector-tag">cText</span> <span class="selector-tag">As</span> <span class="selector-tag">String</span>, <span class="selector-tag">file</span> <span class="selector-tag">As</span> <span class="selector-tag">String</span>) <span class="selector-tag">As</span> <span class="selector-tag">Integer</span></span><br><span class="line">    <span class="selector-tag">On</span> <span class="selector-tag">Error</span> <span class="selector-tag">GoTo</span> <span class="selector-tag">errHandler</span></span><br><span class="line">    <span class="selector-tag">Dim</span> <span class="selector-tag">fsT</span></span><br><span class="line">    'Create Stream object</span><br><span class="line">    Set fsT = CreateObject("ADODB.Stream")</span><br><span class="line">    'Specify stream type - we want To save text/string data.</span><br><span class="line">    fsT.Type = 2</span><br><span class="line">    'Specify charset For the source text data.</span><br><span class="line">    fsT.Charset = "utf-8"</span><br><span class="line">    'Open the stream And write binary data To the object</span><br><span class="line">    <span class="selector-tag">fsT</span><span class="selector-class">.Open</span></span><br><span class="line">    <span class="selector-tag">fsT</span><span class="selector-class">.writetext</span> <span class="selector-tag">cText</span></span><br><span class="line">    'Save binary data To disk</span><br><span class="line">    <span class="selector-tag">fsT</span><span class="selector-class">.SaveToFile</span> <span class="selector-tag">file</span>, 2</span><br><span class="line">    <span class="selector-tag">GoTo</span> <span class="selector-tag">finish</span></span><br><span class="line"><span class="selector-tag">errHandler</span>:</span><br><span class="line">    <span class="selector-tag">MsgBox</span> (<span class="selector-tag">Err</span><span class="selector-class">.Description</span>)</span><br><span class="line">    writeOut = 0</span><br><span class="line">    <span class="selector-tag">Exit</span> <span class="selector-tag">Function</span></span><br><span class="line"><span class="selector-tag">finish</span>:</span><br><span class="line">    writeOut = 1</span><br><span class="line"><span class="selector-tag">End</span> <span class="selector-tag">Function</span></span><br></pre></td></tr></table></figure></p><p>调用方法 <code>Call writeOut(datastr, filePath)</code></p><p>参考网址: <a href="https://gist.github.com/JoBrad/1023484" target="_blank" rel="noopener">https://gist.github.com/JoBrad/1023484</a></p>]]></content>
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vba </tag>
            
            <tag> utf-8 </tag>
            
            <tag> 输出 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
